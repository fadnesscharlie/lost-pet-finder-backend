'use strict';

// stolen with permission from  Lorenzo Antonio Ortega @ https://github.com/doc-devs/iCare/blob/dev/__tests__/authBasicMiddleWare.tests.js
const supertest = require('supertest');
const { server } = require('../server.js');
const { db } = require('../models/index.js');

const mockRequest = supertest(server);

let users = {
	admin: { username: 'admin', password: 'password' },
	editor: { username: 'editor', password: 'password' },
	user: { username: 'user', password: 'password' },
};

beforeAll(async () => {
	await db.sync();
});
afterAll(async () => {
	await db.drop();
});

xdescribe('Auth Router can Create new Users', () => {
	Object.keys(users).forEach((userType) => {
		describe(`${userType} users`, () => {
			it('can create one', async () => {
				const response = await mockRequest
					.post('/signup')
					.send(users[userType]);
				const userObject = response.body;

				expect(response.status).toBe(201);
				expect(userObject.token).toBeDefined();
				expect(userObject.user.id).toBeDefined();
				expect(userObject.user.username).toEqual(users[userType].username);
			});

			it('can signin with basic', async () => {
				const response = await mockRequest
					.post('/signin')
					.auth(users[userType].username, users[userType].password);

				const userObject = response.body;
				expect(response.status).toBe(200);
				expect(userObject.token).toBeDefined();
				expect(userObject.user.id).toBeDefined();
				expect(userObject.user.username).toEqual(users[userType].username);
			});

			// it('can signin with bearer', async () => {

			//   // First, use basic to login to get a token
			//   const response = await mockRequest.post('/signin')
			//     .auth(users[userType].username, users[userType].password);

			//   const token = response.body.token;

			//   // First, use basic to login to get a token
			//   const bearerResponse = await mockRequest
			//     .get('/users')
			//     .set('Authorization', `Bearer ${token}`)

			//   // Not checking the value of the response, only that we "got in"
			//   expect(bearerResponse.status).toBe(200);

			// });
		});

		describe('bad logins', () => {
			it('basic fails with known user and wrong password ', async () => {
				const response = await mockRequest.post('/signin').auth('admin', 'xyz');
				const userObject = response.body;

				expect(response.status).toBe(409);
				expect(userObject.user).not.toBeDefined();
				expect(userObject.token).not.toBeDefined();
			});

			it('basic fails with unknown user', async () => {
				const response = await mockRequest
					.post('/signin')
					.auth('nobody', 'xyz');
				const userObject = response.body;

				expect(response.status).toBe(409);
				expect(userObject.user).not.toBeDefined();
				expect(userObject.token).not.toBeDefined();
			});

			//   it('bearer fails with an invalid token', async () => {

			//     // First, use basic to login to get a token
			//     const bearerResponse = await mockRequest
			//       .get('/users')
			//       .set('Authorization', `Bearer foobar`)

			//     // Not checking the value of the response, only that we "got in"
			//     expect(bearerResponse.status).toBe(403||500);

			//   })
		});
	});

});


// user-creation routes
	// it('Then returns correct response body', async () => {
		// 	const request3 = {
		// 		username: 'username3',
		// 		userID: 'e0e5c2a5-2a50-4dc3-a397-140bdf59a713',
		// 		email: 'username3',
		// 		password: 'username3',
		// 		role: 'editor',
		// 	};
		// 	const response3 = await request.post('/user-creation').send(request3);
		// 	console.log('response3.body -----------------------------', response3.body);
		// 	expect(response3.body.userID).toEqual(expect.any(UUID));
		// 	expect(response3.body.username).toEqual('username3');
		// 	expect(response3.body.password).toEqual(expect.any(String));
		// });